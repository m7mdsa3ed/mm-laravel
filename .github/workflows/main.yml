name: Push

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#  MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  Laravel-Pint-Check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: "Laravel Pint Check"
        uses: aglipanci/laravel-pint-action@2.0.0
        with:
          testMode: true
          configPath: "pint.json"
          onlyDirty: true

  PHP-Unit-Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.3'
      - uses: actions/checkout@v3
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer update -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: php artisan test

  Deploy-Vercel:
    runs-on: ubuntu-latest
    needs: [ Laravel-Pint-Check, PHP-Unit-Tests ]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Vercel CLI
        id: cache-vercel-cli
        uses: actions/cache@v3
        env:
          cache-name: cache-vercel-cli
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prod --no-wait --force --token=${{ secrets.VERCEL_TOKEN }}
